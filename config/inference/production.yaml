# @package _global_
inference:
  input_stac_item: https://datacube-stage.services.geo.ca/api/collections/spacenet-samples/items/SpaceNet_AOI_2_Las_Vegas-056155973080_01_P001-WV03
  root_dir: /space/partner/nrcan/geobase/work/transfer/work/deep_learning/inference/
  checkpoint_dir: /space/partner/nrcan/geobase/work/transfer/work/deep_learning/inference/checkpoints  # (string, optional): directory in which to save the object
  # name of final output file without extension to write in root
  # Warning: this name if only used at generalization. Other outputs are based on inference.output_name
  output_name: SpaceNet_AOI_2_Las_Vegas-056155973080_01_P001-WV03_pred # defaults to {input_stac_item.stem}_pred
  state_dict_path: saved_model/manet_pretrained_bds3_cls1.pth.tar
  download_data: True  # if True, will download local copy of imagery and infer from this copy rather than from web
                        # if network bandwidth is good, no need to download as only windows are downloaded to infer
  save_heatmap: True  # saves a heatmap to root_dir/{output_name}_heatmap.tif
  heatmap_threshold: 15

# GPU parameters
  gpu: 1  # Number of gpus to use.
  max_used_perc: # If RAM usage of detected GPU exceeds this percentage, it will be ignored
  max_used_ram: # If GPU's usage exceeds this percentage, it will be ignored

  batch_size: # if empty, will be calculated automatically to fill "auto_batch_size_threshold" % of GPU Ram
  chunk_size: # Defaults to 512
  auto_batch_size_threshold: 90
  enhance_clip_limit: ${augmentation.clahe_enhance_clip_limit}  # if empty, will skip enhancement transform
  norm_means: ${augmentation.normalization.mean}  # if empty, will skip normalization transform
  norm_stds: ${augmentation.normalization.std}  # if empty, will skip normalization transform
  test_transforms:
    _target_: torchvision.transforms.Compose
    transforms:
      [{'_target_': inference.InferenceDataModule.pad, size: 16, mode: 'reflect'},
      {'_target_': inference.InferenceDataModule.enhance, clip_limit: '${inference.enhance_clip_limit}'},
      {'_target_': inference.InferenceDataModule.preprocess},
      {'_target_': inference.InferenceDataModule.normalization, band_means: '${inference.norm_means}', band_stds: '${inference.norm_stds}'}]

  # Test-time augmentation tranforms. See: https://github.com/qubvel/ttach#transforms
  tta_transforms:  # transform object by hydra's instantiate() method
    _target_: ttach.SegmentationTTAWrapper
    transforms:
      _target_: ttach.Compose
      transforms: [{_target_: ttach.HorizontalFlip}]  # Alternative: tta.aliases.d4_transform()
    merge_mode: max  # Test time augmentation merge mode. See: https://github.com/qubvel/ttach#merge-modes


