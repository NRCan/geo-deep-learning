# @package _global_
# Post-processing: minimally, a polygonized version of the inference (.gpkg) will be created
postprocess:
  root_dir: ${inference.root_dir}
  # name of output file **without extension** to write in root
  output_name: ${inference.output_name}  # MANDATORY
  state_dict_path: ${inference.state_dict_path}

  regularization: True # if True, building features will be regularized using: https://github.com/remtav/projectRegularization/tree/light
  generalization: True  # if True, a generalized version of the inference (.gpkg) will be created with qgis models
  # if True, confidence values are added as an attribute to polygons
  # based on heatmap from inference (requires inference.save_heatmap=True)
  confidence_values: True # Defaults to True

  output_suffixes:
    regularization: _reg
    polygonization: _raw
    generalization: _post

  # Container config - Volume binding arguments are hardcoded in scripts. Modify commands at your own risk!
  cont_type: singularity  # docker or singularity
  reg_cont:
    # Will fallback to using direct python method if an error occurs with container approach.
    # To use fallback, install regularization module: pip install git+https://github.com/remtav/projectRegularization.git@light
    fallback: True
    # Where pretrained models can be found if fallback is necessary
    fallback_models_dir: # "/home/remi/PycharmProjects/projectRegularization/regularization/saved_models_gan"
    # tag of docker image or path to singularity image file (e.g. remtav/gdl or gdl.sif, respectively)
    cont_image: /space/partner/nrcan/geobase/work/transfer/work/deep_learning/singularity_images/gdl-cuda11_v2.2.5-prod.sif
    code_dir: /space/partner/nrcan/geobase/work/transfer/work/deep_learning/operationalization/projectRegularization/regularization
    # command to execute in container.
    command:  # FIXME: use github's weights in regularization repo
      /bin/bash -c 
      "python /media/regularize.py --input-inf /home/${inference.output_name}.tif
      --output /home/${inference.output_name}${postprocess.output_suffixes.regularization}.tif
      --build-val ${dataset.classes_dict.BUIL} --models-dir /media/saved_models_gan --log-conf-path /media/logging.conf"

  poly_cont:
    fallback: True  # Fallback to rasterio's less efficient method. Favour Grass' r.to.vect. for large predictions
    # tag of docker image or path to singularity image file (e.g. remtav/gdl or gdl.sif, respectively)
    # if using docker, pull latest image from https://hub.docker.com/r/remtav/qgis_pp
    cont_image: /space/partner/nrcan/geobase/work/transfer/work/deep_learning/singularity_images/qgis_pp.sif
    # NB: input to polygonization gets overridden by regularization output's if regularization is done
    command:
      /bin/bash -c 
      "qgis_process plugins enable grassprovider;
      qgis_process run grass7:r.to.vect -- input=/home/${inference.output_name}.tif type=2 output=/tmp/rtovect.gpkg;
      qgis_process run native:extractbyattribute -- INPUT=/tmp/rtovect.gpkg FIELD=value OPERATOR=2
      VALUE=0 OUTPUT=/home/${inference.output_name}${postprocess.output_suffixes.polygonization}.gpkg"

  gen_cont:
    qgis_models_dir: postprocess
    # if using docker, pull latest image from https://hub.docker.com/r/remtav/qgis_pp
    cont_image: /space/partner/nrcan/geobase/work/transfer/work/deep_learning/singularity_images/qgis_pp.sif
    command:
      # WARNING: these values and interpolation variables are highly coupled with code to cover different use cases
      # like single-class model extraction vs multi-class models. Modify commands at your own risk!
      # .model3 filenames are hardcoded
      # Some parameter values aren't mandatory as default values exist, but are exposed here to increase configurability
      FORE:
        /bin/bash -c 
        "qgis_process plugins enable geo_sim_processing;
        qgis_process plugins enable processing;
        qgis_process run /models/FORE.model3
        --inlayer=/home/${inference.output_name}${postprocess.output_suffixes.polygonization}.gpkg
        --inselectattrname=value --inselectattrint=${dataset.classes_dict.FORE}
        --insimpdiamtol=0.3 --inrmvholesunder=75 --inredbendtol=2 --inminarea=75
        --outgpkgpath=/home/${postprocess.output_name}${postprocess.output_suffixes.generalization}.gpkg
        --outlayername=FORE_2"
      WAER:
        /bin/bash -c 
        "qgis_process plugins enable geo_sim_processing;
        qgis_process plugins enable processing;
        qgis_process run /models/WAER.model3 
        --inlayer=/home/${inference.output_name}${postprocess.output_suffixes.polygonization}.gpkg
        --inselectattrname=value --inselectattrint=${dataset.classes_dict.WAER}
        --insimpdiamtol=0.3 --inrmvholesunder=25 --inredbendtol=2 --inminarea=25
        --outgpkgpath=/home/${postprocess.output_name}${postprocess.output_suffixes.generalization}.gpkg
        --outlayername=WAER_2"
      ROAI:
        /bin/bash -c 
        "qgis_process plugins enable geo_sim_processing;
        qgis_process plugins enable processing;
        qgis_process run /models/ROAI.model3 
        --inlayer=/home/${inference.output_name}${postprocess.output_suffixes.polygonization}.gpkg
        --inselectattrname=value --inselectattrint=${dataset.classes_dict.ROAI}
        --insimpdiamtol=0.3 --inredbendtol=2 --inrmvholesunder=300 --indensinterval=15 
        --outgpkgpath=/home/${postprocess.output_name}${postprocess.output_suffixes.generalization}.gpkg
        --outlayernameline=ROAI_1
        --outlayernamepoly=ROAI_2"
      BUIL:
        /bin/bash -c 
        "qgis_process plugins enable geo_sim_processing;
        qgis_process plugins enable processing;
        qgis_process run /models/BUIL.model3 
        --inlayer=/home/${inference.output_name}${postprocess.output_suffixes.polygonization}.gpkg
        --inselectattrname=value --inselectattrint=${dataset.classes_dict.BUIL}
        --insimpdiamtol=0.3 --inrmvholesunder=40 
        --outgpkgpath=/home/${postprocess.output_name}${postprocess.output_suffixes.generalization}.gpkg
        --outlayername=BUIL_2"
