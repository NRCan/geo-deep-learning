# Deep learning configuration file ------------------------------------------------
# Five sections :
#   1) Global parameters; those are re-used amongst the next three operations (sampling, training and inference)
#   2) Sampling parameters
#   3) Training parameters
#   4) Inference parameters
#   5) Model parameters

# Global parameters

global:
  samples_size: 256
  num_classes: 2
  data_path: /path/to/data/
  number_of_bands: 3
  model_name: unetsmall     # One of unet, unetsmall, checkpointed_unet or ternausnet
  bucket_name:   # name of the S3 bucket where data is stored. Leave blank if using local files
  classify: False   # Set to True for image classification and False for semantic segmentation

# Sample parameters; used in images_to_samples.py -------------------

sample:
  prep_csv_file: /path/to/csv/file.csv
  samples_dist: 200
  remove_background: True
  mask_input_image: False
  mask_reference: False

# Training parameters; used in train_model.py ----------------------

training:
  output_path: /path/to/model/weights/output/folder
  num_trn_samples: 4960
  num_val_samples: 2208
  batch_size: 32
  num_epochs: 100
  learning_rate: 0.0001
  weight_decay: 0
  step_size: 4
  gamma: 0.9
  class_weights: [1.0, 2.0]
  batch_metrics:    # (int) Metrics computed every (int) batches. If left blank, will not perform metrics. If (int)=1, metrics computed on all batches.

# Inference parameters; used in inference.py --------

inference:
  img_csv_file: /path/to/csv/containing/images/list.csv
  working_folder: /path/to/folder/with/resulting/images
  state_dict_path: /path/to/model/weights/for/inference/checkpoint.pth.tar

# Models parameters; used in train_model.py and inference.py

models:
  unet:   &unet001
    dropout: False
    probability: 0.2    # Set with dropout
    pretrained: False   # optional
  unetsmall:
    <<: *unet001
  ternausnet:
    pretrained: ./models/TernausNet.pt    # Mandatory
  checkpointed_unet: 
    <<: *unet001
  inception:
    pretrained: False   # optional